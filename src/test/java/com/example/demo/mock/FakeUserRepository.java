package com.example.demo.mock;

import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    // 강외자: 사실 FakeUserRepository는 소형 테스트에서 서비스 테스트하는 데 쓰이기 때문에
    // 아래처럼 동시성을 걱정할 필요는 없다. Long과 일반적인 ArrayList를 사용했으면 충분했다.
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<User> findById(long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getId().equals(id) && item.getStatus().equals(userStatus))
                .findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getEmail().equals(email) && item.getStatus().equals(userStatus))
                .findAny();
    }

    @Override
    public User save(User user) {
        // 강의자: JPA의 기본 save 동작이, id 값이 null이거나 0이면 insert 하고 그렇지 않으면 update 한다.
        // (나: JpaRepository의 save 기본 메소드의 동작을 말하는 듯 하다. insert or merge)
        // 그것을 여기에 유사하게 구현하려 한다.
        // 사실 이런 동작이 지나치가 JPA에 의존하는 것 같다. save와 update를 나누면 더 좋을 것 같다. 일단은 이대로 진행
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> item.getId().equals(user.getId()));
            data.add(user);
            return user;
        }
    }
}
